import AlertMessage from "../entities/alert-message";
import Product from "../entities/product";
import PurchaseOrder from "../entities/purchase-order";
import AlertMessagesRepository from "../repositories/alert-messages-repository";
import PurchaseOrdersRepository from "../repositories/purchase-orders-repository";
import SendEmailService from "../services/send-email-service";
import SendMessageToManagementSystemService from "../services/send-message-to-management-system-service";

export interface ProductOnLowInventoryEventTriggerActionProps {
    sendAlert?:boolean,
    alertMessage?: AlertMessage, 
    send?:{
        email?:{ to: string[] } | "DON'T SEND", 
        system?:boolean
    }, 
    createOrder?:boolean
}

export default class ProductOnLowInventoryEvent {

    constructor(
        protected product: Product,
        protected alertMessagesRepository: AlertMessagesRepository,
        protected sendMessageToManagementSystem: SendMessageToManagementSystemService,
        protected sendEmailService: SendEmailService,
        protected purchaseOrdersRepository: PurchaseOrdersRepository,
    ) {

    }


    /**
     * Activate the trigger generated by the low stock product event, as instructed by the business rules.
     *  
     * It's possible to exclude the triggering of each service that by default will be triggered by the trigger. If no service is selected, then all services will be triggered, and those explicitly excluded will not be triggered.
     * 
     * 
     * @param sendAlert [boolean?] - if passed as false, it won't send the alert message and will invalidate the "alertMessage" and "send" parameters. If not passed or passed as true, it will send the alert message.
     * 
     * @param alertMessage [AlertMessage?] - if passed, it will send the corresponding alert message. If not passed, a default alert message will be sent.
     * 
     * @param send [{email?:{ to: string[] } | "DON'T SEND", system?:boolean}?] - if not passed, it will send the email to a default email and also send the message to the management system. If "DON'T SEND" is passed as email, it won't be sent, and if system is passed as false, it won't be sent either.
     * 
     * @param createOrder [boolean?] - if passed as false, the Purchase Order won't be created, but if passed as true or not passed at all, the Purchase Order will be created.
     * 
     * @returns ({ wasEmailSent:boolean, wasSystemAlertSent:boolean, wasPurchaseOrderCreated:boolean }) - report if the services that has been triggered
     */
    async triggerAction({ sendAlert = true, alertMessage, send, createOrder = true }:ProductOnLowInventoryEventTriggerActionProps) {
        let wasEmailSent = false
        let wasSystemAlertSent = false
        let wasPurchaseOrderCreated = false

        if (this.product.isOnMinAmount) {                    


            if (sendAlert) {
                const title = `Limite de Estoque - ${this.product.title}`
                const body = `
                Atenção, o produto ${this.product.title}, identificado por ${this.product.id} acabou de passar o limite mínimo de estoque.
    
                limite mínimo: ${this.product.inventory.data.minAmount}
                quantidade em estoque: ${this.product.inventory.data.amount}
                
                `.replaceAll(/  +/g, '') 

                alertMessage = alertMessage ? alertMessage : AlertMessage.create({ 
                    message:body,
                    title
                 })
                await this.alertMessagesRepository.create(alertMessage)

                if (!send) {
                    send = {
                        email:{ to:['example@example.com'] },
                        system: true
                    }
                }

                if (send.email === undefined) {
                    send.email = { to:['example@example.com'] }
                }

                if(send.system === undefined) {
                    send.system = true
                }
                
                if (send.email && send.email !== 'DON\'T SEND') {
                    if (send.email.to) {
                        this.sendEmailService.setTo(send.email.to)
                    }
                    this.sendEmailService.setBody(alertMessage.message)
                    this.sendEmailService.setTitle(alertMessage.title)
                    wasEmailSent = await this.sendEmailService.send()
                }
                if (send.system) {
                    this.sendMessageToManagementSystem.setBody(alertMessage.message)
                    this.sendMessageToManagementSystem.setTitle(alertMessage.title)
                    wasSystemAlertSent = await this.sendMessageToManagementSystem.send()
                }
            }

            if (createOrder) {
                const purchaseOrder = PurchaseOrder.create({ items:[
                    {
                        amount:this.product.autoPurchaseAmount,
                        product:this.product
                    }
                ] })
                const { purchaseOrder:order } = await this.purchaseOrdersRepository.create(purchaseOrder)
                wasPurchaseOrderCreated = !!order
            }
        }

        return { wasEmailSent, wasSystemAlertSent, wasPurchaseOrderCreated }
    }



}